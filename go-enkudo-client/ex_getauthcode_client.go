/** ex_getauthcode_client.go
This is a simple go clinet for Enkudo_DSP_Sybscriber.yaml API. It simple makes getAuthCode request.

To be able to utilize generated go client code from local directory, without "installing" into
go env, go client src must be a subdirectory of this client project and client library should not
be set and a go module that is, it should not have go.mod file. Client library/module is useful
when it is "installed" in go env GOPATH.

Assuming you used gencode.sh script with the following command in upper directory

	% gencode.sh Enkudo_DSP_Subscribe.yaml go

a go_src directory that include go clinet code is generated by openapi-generator.
rename or delte go.mod and go.sum files in go_src directory

Then simply create a soft link to go_src directory.

	% ln -s ../go_src openapiclient
	% go mod init enkudo-dsp-client
	% go mod tidy
	% go build

executable will be named as module name
	% enkudo-dsp-client

**/

package main

import (
	"context"
	"fmt"
	"os"

	openapiclient "enkudo-dsp-client/openapiclient"
)

func main() {
	authCodeReq := *openapiclient.NewAuthCodeReq("Target_example") // AuthCodeReq |

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)
	resp, r, err := apiClient.DefaultEnkudoDSP.GetAuthCode(context.Background()).AuthCodeReq(authCodeReq).Execute()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error when calling `DefaultEnkudoDSP.GetAuthCode``: %v\n", err)
		fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
	}
	// response from `GetAuthCode`: AuthCodeRsp
	fmt.Fprintf(os.Stdout, "Response from `DefaultEnkudoDSP.GetAuthCode`: %v\n", resp)
}
