openapi: '3.0.0'
info:
  title: 'Enkudo DSP Northbound Subscription API'
  description: |
    Enkudo DSP is Telenityâ€™s next-generation digital services platform to monetize the 
    digital services and content served on top of the customer network. Enkudo DSP solution 
    enables customers to subscribe/purchase digital content of their choice (ranging from 
    games, video stream, educational content, etc.) through a mobile application and web 
    portal with a variety of payment options, on a revenue share business model.
    This API is for the consumption of Content Providers. It provides end-user subscription, 
    unsubscription, query information and notification interfaces for DSP. 
    <br><br>
    NGSSM's subscription API is inbound, meaning that, for this API, NGSSM acts as the server
    and request direction is from the client to NGSSM. Subscription APIs include  methods: 
    - Generate Authcode, 
    - ReGenerate Authcode, 
    - Create Subscription and 
    - Cancel Subscription
    - Query Subscriber Info 
    As the names imply, Authcode methods are used to create a one-time password token at OTPS, 
    Create Subscription is used to create an offer subscription at NGSSM, 
    whereas Cancel Subscription is used to cancel an existing offer subscription on NGSSM
  version: '1.0'
servers:
  - url: 'http://localhost/v1/subscription'
    description: Development server
  - url: 'https://api.enkudo-{customer}.com/v1/subscription'
    description: Production server
    variables:
      customer:
        default: demo
        description: Enkudo customer name
  - url: 'https://api-test.enkudo-{customer}.com/v1/subscription'
    description: Test server
    variables:
      customer:
        default: demo
        description: Enkudo customer name.
paths:
  /authcode:
    post:
      operationId: getAuthCode
      summary : Authorization Code Request
      description: |
        'Before issuing any requests to the endpoint, web applications need to be authenticated. 
        For authentication, Client Credentials grant of OAuth 2.0 specification is used. 
        Please refer to  for more information on OAuth.http://tools.ietf.org/html/rfc6749#section-4.4
        The client authentication follows these steps:
        - Client encodes its key and password into an encoded set of credentials.
        - Client makes a request to OAuth/token?grant_type=client_credentials endpoint and 
          passes the credentials information in the POST request.
        - If successfully authenticated, client receives an access token in the response.
        - Client includes this bearer token when making requests to the DCB API'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCodeReq'
        required: true
      responses:
        '200':
          description: 'Successful Authorization Code Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthCodeRsp'
        '403':
          description: 'Not Allowed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRsp'
        '404': 
          description: 'Incalid Trasaction Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRsp'
        '500':
          description: 'General Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRsp'
  /authcode/{trxid}:
    put:
      operationId: regenerateAuthCode
      summary: Regenerate Auth-Code
      description: | 
        'Regenerate Auth Code API has the same basic functionality of Generate API with one caveat: 
        It first invalidates the current Auth Code and only then generates a new random password 
        and sends it to the application. The created is password is not sent to the subscriber.
        The application can send the password to the subscriber by any means it prefers.
        For Regenerate Auth Code API to be called successfully, Generate Auth Code must have been 
        called first and there should be a valid Transaction ID from that API call'
      parameters: 
        - name: trxid
          in: path
          schema:
            $ref: 'Enkudo_DSP_CommonData.yaml#/components/schemas/trxid'
          required: true
      responses:
        '200':
          description: 'Successful Authorization Code Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegenerateAuthCodeRsp'
        '403':
          description: 'Not Allowed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRsp'
        '404': 
          description: 'Incalid Trasaction Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRsp'
        '500':
          description: 'General Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRsp'
  /subscribe:
    post:
      operationId: subscribe
      summary: Create Subscription
      description: 'Subscribes the customer identified with the parameters passed in the JSON body parameter "offer"'
      parameters: []
      responses:
        '200':
          description: OK
  /unsubscribe:
    post:
      operationId: unsubscribe
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
  /query/{msisdn}:
    get:
      operationId: getMSISDN
      description: ''
      parameters:
        - name: msisdn
          in: path
          required: true
          schema:
            $ref: 'Enkudo_DSP_CommonData.yaml#/components/schemas/msisdn' 
      responses:
        '200':
          description: OK
components:
  schemas:
    AuthCodeReq:
      type: object
      properties:
        type:
          $ref: 'Enkudo_DSP_CommonData.yaml#/components/schemas/type' 
        length: 
          description: 'Length of the generated Auth Code'
          type: integer
          format: int32
        template:
          description: 'Template Message that is defined at the OTP module'
          type: string
        sender:
          description: 'Sender address of the  AuthCode SMS'
          type: string      
          maxLength: 1024
        target:
          description: 'Recipient address that requested the Auth Code'
          type: string
          maxLength: 1024
      required:
        - target
    AuthCodeRsp:
      type: object
      properties:
        trxid:
          $ref: 'Enkudo_DSP_CommonData.yaml#/components/schemas/trxid'
      required:
        - trxid
    RegenerateAuthCodeRsp:
      type: object
      properties:
        otp:
          description: 'Generated OTP, empty, not shared withthe Client'
          type: string
          maxLength: 256
        trxid:
          $ref: 'Enkudo_DSP_CommonData.yaml#/components/schemas/trxid' 
        type:
          description: 'Type of the generated Auth Code'
          $ref: 'Enkudo_DSP_CommonData.yaml#/components/schemas/type' 
        length: 
          description: 'Generated OTP length'
          type: integer
          format: int32
        channel:
          $ref: 'Enkudo_DSP_CommonData.yaml#/components/schemas/channel' 
        template:
          description: 'Generated OTP SMS template. Always"default"'
          type: string
          default: 'default'
        validityPeriodInSeconds:
          description: 'OTP validity period in seconds'
          type: integer
          format: int32
        createdAt:
          description: 'OTP creation time in miliseconds from Unix epoch(?) in local time'
          type: integer
          format: int64
        expiresAt:
          description: 'OTP expiry time in miliseconds from Unix epoch(?) in local time'
          type: integer
          format: int64
        maxVerificationAttempts:
          description: |
            'Maximum number of attempts allowed for OTP verification to the Client 
            (and so the customer).'
          type: integer
          format: int32
        remainingVerificationAttempts:
          description: |
            'Remaining number of attempts allowed for OTP verification to the Client 
            (and so the customer).'
          type: integer
          format: int32
        maxRegenerationAttempts:
          description: |
            'Maximum number of attempts allowed for OTP regeneration to the Client 
            (and so thecustomer)'
          type: integer
          format: int32
        remainingRegenerationAttempts:
          description: |
            'Remaining number of attempts allowed for OTP regeneration to the Client 
            (and so thecustomer)'
          type: integer
          format: int32
        minRegenerationDelayInSeconds:
          description: |
            'Minimum delay in seconds before the Client can trigger OTP renegeneration'
          type: integer
          format: int32
    ErrorRsp:
      type: object
      properties:
        code:
          description: 'Enkudo API ErrorRspure code. See API document descriptions'
          type: string
          maxLength: 8
          pattern: '^[0-9]$'
        message:
          description: 'Human readble ErrorRsp message'
          type: string
          maxLength: 256



